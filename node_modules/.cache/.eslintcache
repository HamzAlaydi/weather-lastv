[{"/home/hamza-alaydi/React/weather-app/src/index.js":"1","/home/hamza-alaydi/React/weather-app/src/App.js":"2","/home/hamza-alaydi/React/weather-app/src/screens/DayScreen.js":"3","/home/hamza-alaydi/React/weather-app/src/components/GetLocation.js":"4","/home/hamza-alaydi/React/weather-app/src/components/FetchDataFromAPI.js":"5","/home/hamza-alaydi/React/weather-app/src/screens/Index.js":"6","/home/hamza-alaydi/React/weather-app/src/recoil/atom/cityAtom.js":"7","/home/hamza-alaydi/React/weather-app/src/screens/DisplayData.js":"8","/home/hamza-alaydi/React/weather-app/src/components/FiveDays.js":"9","/home/hamza-alaydi/React/weather-app/src/components/LocationData.js":"10","/home/hamza-alaydi/React/weather-app/src/components/SearchData.js":"11"},{"size":251,"mtime":1638389166000,"results":"12","hashOfConfig":"13"},{"size":1019,"mtime":1638994801920,"results":"14","hashOfConfig":"13"},{"size":122,"mtime":1638719156000,"results":"15","hashOfConfig":"13"},{"size":1996,"mtime":1638960228072,"results":"16","hashOfConfig":"13"},{"size":3917,"mtime":1638995916412,"results":"17","hashOfConfig":"13"},{"size":2014,"mtime":1638993010916,"results":"18","hashOfConfig":"13"},{"size":813,"mtime":1638988524015,"results":"19","hashOfConfig":"13"},{"size":1096,"mtime":1638995584862,"results":"20","hashOfConfig":"13"},{"size":1939,"mtime":1638987366688,"results":"21","hashOfConfig":"13"},{"size":2657,"mtime":1638992831101,"results":"22","hashOfConfig":"13"},{"size":2493,"mtime":1638994039533,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"za3l6v",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"26"},"/home/hamza-alaydi/React/weather-app/src/index.js",[],["55","56"],"/home/hamza-alaydi/React/weather-app/src/App.js",["57","58","59","60"],"import { useRecoilState } from \"recoil\";\nimport FetchDataFromAPI from \"./components/FetchDataFromAPI\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport DayScreen from \"./screens/DayScreen\";\nimport Index from \"./screens/Index\";\nimport DisplayData from \"./screens/DisplayData\";\nimport GetLocation from \"./components/GetLocation\";\nimport { searchedCityState } from \"./recoil/atom/cityAtom\";\nfunction App() {\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<Index />} exact />\n        </Routes>\n        <Routes>\n          <Route\n            path={`DisplayFiveDays/:city`}\n            element={<DisplayData />}\n            exact\n          />\n        </Routes>\n        <Routes>\n          <Route path=\"/Day/:id\" element={<DayScreen />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/hamza-alaydi/React/weather-app/src/screens/DayScreen.js",[],"/home/hamza-alaydi/React/weather-app/src/components/GetLocation.js",["61","62"],"import { useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { cityState } from \"../recoil/atom/cityAtom\";\r\nimport React from \"react\";\r\n\r\nconst GetLocation = () => {\r\n  const [city, setCity] = useRecoilState(cityState);\r\n\r\n  const POSITIONSTACK_API_URL = \"http://api.positionstack.com\";\r\n  const POSITIONSTACK_VERSION = \"v1\";\r\n  const POSITIONSTACK_KEY = \"61d20e9d297b7c98bad348ac29cdff2d\";\r\n  const POSITIONSTACK_ENDPOINT = `${POSITIONSTACK_API_URL}/${POSITIONSTACK_VERSION}/reverse?access_key=${POSITIONSTACK_KEY}`;\r\n\r\n  function main() {\r\n    const options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 5000,\r\n      maximumAge: 0,\r\n    };\r\n\r\n    function getPositionCallOnSuccess(pos) {\r\n      const crd = pos.coords;\r\n\r\n      // console.log(\"Your current position is:\");\r\n      // console.log(`Latitude : ${crd.latitude}`);\r\n      // console.log(`Longitude: ${crd.longitude}`);\r\n\r\n      // console.log(`Now using positionstack api to get city`);\r\n\r\n      fetch(\r\n        `${POSITIONSTACK_ENDPOINT}&query=${crd.latitude},${crd.longitude}&output=json`\r\n      )\r\n        .then((response) => {\r\n          response.json().then(({ data }) => {\r\n            // if (!data || data.length === 0)\r\n            // //   console.warn(\"ERROR no data found for given coordinates\");\r\n            // console.log(read_cookie(\"City\"));\r\n\r\n            let name = data[0].region.split(\" \");\r\n            let n = name[0];\r\n            let cityfromLocation = n;\r\n            setCity(cityfromLocation);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.warn(\"ERROR \", error.message);\r\n        });\r\n    }\r\n\r\n    function getPositionCallOnError(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      getPositionCallOnSuccess,\r\n      getPositionCallOnError,\r\n      options\r\n    );\r\n  }\r\n  useEffect(() => {\r\n    main();\r\n  }, []);\r\n  return <div></div>;\r\n};\r\n\r\nexport default GetLocation;\r\n","/home/hamza-alaydi/React/weather-app/src/components/FetchDataFromAPI.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  cityState,\r\n  fiveDaysState,\r\n  weatherState,\r\n  searchWeatherState,\r\n  searchedCityState,\r\n  locationWetherState,\r\n  lOneDayState,\r\n  sOneDayState,\r\n  sWeatherState,\r\n} from \"../recoil/atom/cityAtom\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport GetLocation from \"./GetLocation\";\r\nimport Index from \"../screens/Index\";\r\n\r\nconst key = \"478f1611be4e3a210abc53f2b1c9e8d4\";\r\nconst FetchDataFromAPI = () => {\r\n  const [weather, setWeather] = useRecoilState(weatherState);\r\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\r\n  // const [sWeather, setSWeather] = useRecoilState(searchWeatherState);\r\n  const [lWeather, setLWeather] = useRecoilState(locationWetherState);\r\n  const [sWeather, setSWeather] = useRecoilState(sWeatherState);\r\n  const [city, setCity] = useRecoilState(cityState);\r\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\r\n  const [lOneDay, setLOneDay] = useRecoilState(lOneDayState);\r\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\r\n\r\n  let link = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${key}`;\r\n\r\n  const locationLink = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`;\r\n  const searchedLink = `https://api.openweathermap.org/data/2.5/weather?q=${searchedCity}&appid=${key}`;\r\n\r\n  ////////////////////Fetch Data\r\n\r\n  const sendReq = async () => {\r\n    if (window.location.pathname == \"/\") {\r\n      if ((city != \"\", city != \"undefined\")) {\r\n        const locationWeather = await axios.get(locationLink);\r\n        if (lWeather == \"\") {\r\n          setLWeather(locationWeather);\r\n          console.log(\"lWeather not added yet\");\r\n        } else {\r\n          setLOneDay(lWeather.data);\r\n        }\r\n      } else {\r\n        return console.log(\"City Not loaded Yet from location weather one Day\");\r\n      }\r\n\r\n      //Get data for location city\r\n\r\n      if (searchedCity != \"\") {\r\n        // Get data for searched City\r\n\r\n        const xd = await axios.get(searchedLink);\r\n        setSWeather(xd);\r\n        console.log(sWeather, \"sWeather\");\r\n        if (xd == \"\") {\r\n          // console.log(\"SWeather not added yet\");\r\n        } else {\r\n          setSOneDay(xd.data);\r\n        }\r\n      } else {\r\n        return console.log(\"City Not loaded Yet from location weather one Day\");\r\n      }\r\n    } else if (window.location.pathname == \"/DisplayFiveDays/1\") {\r\n      const weatherData = await axios.get(link);\r\n      setWeather(weatherData);\r\n    } else if (window.location.pathname == `/DisplayFiveDays/${searchedCity}`) {\r\n      link = `https://api.openweathermap.org/data/2.5/forecast?q=${searchedCity}&appid=${key}`;\r\n\r\n      const weatherData = await axios.get(link);\r\n      setWeather(weatherData);\r\n      // console.log(\r\n      //   \"ParisParisParisParisParisParisParisParisParisParisParisParisParis\"\r\n      // );\r\n    }\r\n  };\r\n\r\n  const fetchData = () => {\r\n    if (typeof city == \"undefined\" || city == \"\") {\r\n      console.log(\"no city selected\");\r\n    } else {\r\n      sendReq();\r\n\r\n      let tempArr = [];\r\n      if (weather == \"recoil\" || typeof weather == undefined) {\r\n        console.log(\"City Nane  not loaded yet *\");\r\n      } else {\r\n        let iterator = weather.data.list;\r\n\r\n        for (let i = 0; i < iterator.length; i += 8) {\r\n          tempArr.push(iterator[i]);\r\n        }\r\n        setFiveDays(tempArr);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [city, searchedCity]);\r\n\r\n  return (\r\n    <Container>\r\n      <GetLocation />\r\n      <Row>\r\n        {/* {fiveDays.map((data) => (\r\n          <Col key={data.dt_txt}>\r\n            // <DisplayData dat**a={data} />\r\n          </Col>\r\n        ))} */}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FetchDataFromAPI;\r\n","/home/hamza-alaydi/React/weather-app/src/screens/Index.js",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport FetchDataFromAPI from \"../components/FetchDataFromAPI\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { searchWeatherState } from \"../recoil/atom/cityAtom\";\r\nimport { Card, ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\r\n\r\nimport {\r\n  cityState,\r\n  fiveDaysState,\r\n  weatherState,\r\n  searchedCityState,\r\n  locationWetherState,\r\n  lOneDayState,\r\n  sOneDayState,\r\n} from \"../recoil/atom/cityAtom\";\r\nimport LocationData from \"../components/LocationData\";\r\nimport SearchData from \"../components/SearchData\";\r\n\r\nconst Index = () => {\r\n  const [cityInput, setCityInput] = useState(\"London\");\r\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\r\n\r\n  const [lWeather, setLWeather] = useRecoilState(locationWetherState);\r\n  const [lOneDay, setLOneDay] = useRecoilState(lOneDayState);\r\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\r\n\r\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\r\n\r\n  const handelChange = (e) => {\r\n    setCityInput(e.target.value);\r\n  };\r\n  const handelClick = () => {\r\n    setSearchedCity(cityInput);\r\n  };\r\n  const form = (_) => {\r\n    return (\r\n      <div className=\"input-group mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter Ther City Name\"\r\n          aria-label=\"Recipient's username\"\r\n          aria-describedby=\"button-addon2\"\r\n          onChange={handelChange}\r\n        />\r\n        <button\r\n          onClick={handelClick}\r\n          className=\"btn btn-outline-secondary\"\r\n          type=\"button\"\r\n          id=\"button-addon2\"\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FetchDataFromAPI />\r\n      {form()}\r\n      <Row>\r\n        <LocationData data={lOneDay} />\r\n        <SearchData data={sOneDay} />\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","/home/hamza-alaydi/React/weather-app/src/recoil/atom/cityAtom.js",[],"/home/hamza-alaydi/React/weather-app/src/screens/DisplayData.js",["99","100","101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  fiveDaysState,\r\n  cityState,\r\n  searchedCityState,\r\n} from \"../recoil/atom/cityAtom\";\r\nimport { Row, Container, Col } from \"react-bootstrap\";\r\nimport FetchDataFromAPI from \"../components/FetchDataFromAPI\";\r\nimport FiveDays from \"../components/FiveDays\";\r\nconst DisplayData = (props) => {\r\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\r\n  const [city, setCity] = useRecoilState(cityState);\r\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\r\n\r\n  return (\r\n    <Container>\r\n      <FetchDataFromAPI />\r\n      <h3>You Choose {searchedCity} City</h3>\r\n      <Row>\r\n        {fiveDays.map((data) => {\r\n          return (\r\n            <Col key={data.weather[0].id}>\r\n              {console.log(data)}\r\n              {console.log(fiveDays.length)}\r\n              <Row>\r\n                <FiveDays data={data} />\r\n              </Row>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\nexport default DisplayData;\r\n","/home/hamza-alaydi/React/weather-app/src/components/FiveDays.js",["105"],"import React from \"react\";\nimport { Card, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { fiveDaysState } from \"../recoil/atom/cityAtom\";\nimport { useRecoilState } from \"recoil\";\nconst FiveDays = (props) => {\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\n  if (fiveDays.length > 0) {\n    const link = `http://openweathermap.org/img/wn/${props.data.weather[0].icon}@2x.png`;\n    let date = new Date(props.data.dt_txt);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let readableDate = date.toDateString();\n\n    let temperature = props.data.main.temp - 273.15;\n    temperature = Math.round(temperature);\n    let feels_like = (props.data.main.feels_like - 273.15) * 10;\n    feels_like = Math.round(feels_like);\n    feels_like = feels_like / 10;\n\n    return (\n      <Link\n        to={`/Day/${day}/${month}/${year}`}\n        style={{ textDecoration: \"none\" }}\n      >\n        <Card className=\"my-3 p-3 rounded\">\n          <ListGroupItem>{readableDate}</ListGroupItem>\n          <Card.Img variant=\"top\" src={link} />\n          <Card.Body>\n            <Card.Title>\n              {\" \"}\n              <Card.Title>\n                {\" \"}\n                {props.data.weather[0].main} <span> {temperature}°</span>\n              </Card.Title>\n            </Card.Title>\n          </Card.Body>\n          <ListGroup className=\"list-group-flush\">\n            <ListGroupItem>{props.data.weather[0].description}</ListGroupItem>\n            <ListGroupItem>Temperature: {temperature}°</ListGroupItem>\n            <ListGroupItem>Feels like : {feels_like}°</ListGroupItem>\n            <ListGroupItem>\n              Wind Speed : {props.data.wind.speed} km\n            </ListGroupItem>\n          </ListGroup>\n        </Card>\n      </Link>\n    );\n  } else {\n    return <p>Data not loaded yet</p>;\n  }\n};\n\nexport default FiveDays;\n","/home/hamza-alaydi/React/weather-app/src/components/LocationData.js",["106","107","108","109","110","111","112","113"],"import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { cityState, lOneDayState, sOneDayState } from \"../recoil/atom/cityAtom\";\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\n// if (props.data.weather.length > 0 && props.data.weather !== \"undefined\") {\n//   return (\n//     <div>\n//       <p>SearchData</p>\n//     </div>\n//   );\n// } else {\n//   return <p>Waiting Data</p>;\n// }\nconst SearchData = (props) => {\n  const [lOneDay, setLOneDay] = useRecoilState(lOneDayState);\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\n  const [city, setCity] = useRecoilState(cityState);\n\n  if (lOneDay.dt) {\n    const link = `http://openweathermap.org/img/wn/${lOneDay.weather[0].icon}@2x.png`;\n\n    let date = new Date();\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let readableDate = date.toDateString();\n\n    let temperature = lOneDay.main.temp - 273.15;\n    temperature = Math.round(temperature);\n    let feels_like = (lOneDay.main.feels_like - 273.15) * 10;\n    feels_like = Math.round(feels_like);\n    feels_like = feels_like / 10;\n    return (\n      <Col>\n        <Link to={`/DisplayFiveDays/${city}`}>\n          <Row xs={1} md={2} className=\"g-4\">\n            {console.log(lOneDay.name)}\n            {Array.from({ length: 1 }).map((_, idx) => (\n              <Col>\n                <Card style={{ marginTop: \"40px\" }}>\n                  <ListGroupItem>{readableDate}</ListGroupItem>\n                  <Card.Title style={{ marginLeft: \"15px\" }}>\n                    {lOneDay.name} <span> City</span>\n                  </Card.Title>\n                  <Card.Img variant=\"top\" src={link} />\n\n                  <ListGroup className=\"list-group-flush\">\n                    <ListGroupItem>\n                      <Card.Title style={{ marginLeft: \"0px\" }}>\n                        {lOneDay.weather[0].main} <span> {temperature}°</span>\n                      </Card.Title>\n                      {lOneDay.weather[0].description}\n                    </ListGroupItem>\n                    <ListGroupItem>Temperature: {temperature}°</ListGroupItem>\n                    <ListGroupItem>Feels like : {feels_like}°</ListGroupItem>\n                    <ListGroupItem>\n                      Wind Speed : {lOneDay.wind.speed} km\n                    </ListGroupItem>\n                  </ListGroup>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Link>\n      </Col>\n    );\n  } else {\n    return <p>not Loaded yet</p>;\n  }\n};\n\nexport default SearchData;\n","/home/hamza-alaydi/React/weather-app/src/components/SearchData.js",["114","115","116","117","118","119","120","121"],"import React from \"react\";\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  cityState,\n  searchedCityState,\n  sOneDayState,\n} from \"../recoil/atom/cityAtom\";\n\nconst LocationData = () => {\n  const [city, setCity] = useRecoilState(cityState);\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\n\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\n  if (sOneDay.dt) {\n    const link = `http://openweathermap.org/img/wn/${sOneDay.weather[0].icon}@2x.png`;\n\n    let date = new Date();\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let readableDate = date.toDateString();\n\n    let temperature = sOneDay.main.temp - 273.15;\n    temperature = Math.round(temperature);\n    let feels_like = (sOneDay.main.feels_like - 273.15) * 10;\n    feels_like = Math.round(feels_like);\n    feels_like = feels_like / 10;\n    return (\n      <Col>\n        <Link to={`/DisplayFiveDays/${searchedCity}`}>\n          <Row xs={1} md={2} className=\"g-4\">\n            {console.log(sOneDay.name)}\n            {Array.from({ length: 1 }).map((_, idx) => (\n              <Col>\n                <Card style={{ marginTop: \"40px\" }}>\n                  <ListGroupItem>{readableDate}</ListGroupItem>\n                  <Card.Title style={{ marginLeft: \"15px\" }}>\n                    {sOneDay.name} <span> City</span>\n                  </Card.Title>\n                  <Card.Img variant=\"top\" src={link} />\n\n                  <ListGroup className=\"list-group-flush\">\n                    <ListGroupItem>\n                      <Card.Title style={{ marginLeft: \"0px\" }}>\n                        {sOneDay.weather[0].main} <span> {temperature}°</span>\n                      </Card.Title>\n                      {sOneDay.weather[0].description}\n                    </ListGroupItem>\n                    <ListGroupItem>Temperature: {temperature}°</ListGroupItem>\n                    <ListGroupItem>Feels like : {feels_like}°</ListGroupItem>\n                    <ListGroupItem>\n                      Wind Speed : {sOneDay.wind.speed} km\n                    </ListGroupItem>\n                  </ListGroup>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Link>\n      </Col>\n    );\n  } else {\n    return <div> not Entered yet </div>;\n  }\n};\nexport default LocationData;\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":24},{"ruleId":"126","severity":1,"message":"130","line":8,"column":8,"nodeType":"128","messageId":"129","endLine":8,"endColumn":19},{"ruleId":"126","severity":1,"message":"131","line":11,"column":10,"nodeType":"128","messageId":"129","endLine":11,"endColumn":22},{"ruleId":"126","severity":1,"message":"132","line":11,"column":24,"nodeType":"128","messageId":"129","endLine":11,"endColumn":39},{"ruleId":"126","severity":1,"message":"133","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":62,"column":6,"nodeType":"136","endLine":62,"endColumn":8,"suggestions":"137"},{"ruleId":"126","severity":1,"message":"138","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"139","line":9,"column":3,"nodeType":"128","messageId":"129","endLine":9,"endColumn":21},{"ruleId":"126","severity":1,"message":"140","line":16,"column":10,"nodeType":"128","messageId":"129","endLine":16,"endColumn":13},{"ruleId":"126","severity":1,"message":"141","line":18,"column":8,"nodeType":"128","messageId":"129","endLine":18,"endColumn":13},{"ruleId":"126","severity":1,"message":"132","line":23,"column":24,"nodeType":"128","messageId":"129","endLine":23,"endColumn":39},{"ruleId":"126","severity":1,"message":"142","line":27,"column":16,"nodeType":"128","messageId":"129","endLine":27,"endColumn":23},{"ruleId":"126","severity":1,"message":"143","line":28,"column":10,"nodeType":"128","messageId":"129","endLine":28,"endColumn":18},{"ruleId":"126","severity":1,"message":"144","line":29,"column":10,"nodeType":"128","messageId":"129","endLine":29,"endColumn":17},{"ruleId":"126","severity":1,"message":"145","line":30,"column":10,"nodeType":"128","messageId":"129","endLine":30,"endColumn":17},{"ruleId":"146","severity":1,"message":"147","line":40,"column":34,"nodeType":"148","messageId":"149","endLine":40,"endColumn":36},{"ruleId":"146","severity":1,"message":"150","line":41,"column":17,"nodeType":"148","messageId":"149","endLine":41,"endColumn":19},{"ruleId":"146","severity":1,"message":"150","line":41,"column":29,"nodeType":"148","messageId":"149","endLine":41,"endColumn":31},{"ruleId":"146","severity":1,"message":"147","line":43,"column":22,"nodeType":"148","messageId":"149","endLine":43,"endColumn":24},{"ruleId":"146","severity":1,"message":"150","line":55,"column":24,"nodeType":"148","messageId":"149","endLine":55,"endColumn":26},{"ruleId":"146","severity":1,"message":"147","line":61,"column":16,"nodeType":"148","messageId":"149","endLine":61,"endColumn":18},{"ruleId":"146","severity":1,"message":"147","line":69,"column":41,"nodeType":"148","messageId":"149","endLine":69,"endColumn":43},{"ruleId":"146","severity":1,"message":"147","line":72,"column":41,"nodeType":"148","messageId":"149","endLine":72,"endColumn":43},{"ruleId":"146","severity":1,"message":"147","line":84,"column":44,"nodeType":"148","messageId":"149","endLine":84,"endColumn":46},{"ruleId":"146","severity":1,"message":"147","line":90,"column":19,"nodeType":"148","messageId":"149","endLine":90,"endColumn":21},{"ruleId":"134","severity":1,"message":"151","line":105,"column":6,"nodeType":"136","endLine":105,"endColumn":26,"suggestions":"152"},{"ruleId":"126","severity":1,"message":"153","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"140","line":2,"column":26,"nodeType":"128","messageId":"129","endLine":2,"endColumn":29},{"ruleId":"126","severity":1,"message":"139","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":28},{"ruleId":"126","severity":1,"message":"154","line":6,"column":10,"nodeType":"128","messageId":"129","endLine":6,"endColumn":14},{"ruleId":"126","severity":1,"message":"155","line":6,"column":16,"nodeType":"128","messageId":"129","endLine":6,"endColumn":25},{"ruleId":"126","severity":1,"message":"156","line":6,"column":27,"nodeType":"128","messageId":"129","endLine":6,"endColumn":40},{"ruleId":"126","severity":1,"message":"157","line":6,"column":42,"nodeType":"128","messageId":"129","endLine":6,"endColumn":48},{"ruleId":"126","severity":1,"message":"158","line":9,"column":3,"nodeType":"128","messageId":"129","endLine":9,"endColumn":12},{"ruleId":"126","severity":1,"message":"159","line":11,"column":3,"nodeType":"128","messageId":"129","endLine":11,"endColumn":15},{"ruleId":"126","severity":1,"message":"131","line":22,"column":10,"nodeType":"128","messageId":"129","endLine":22,"endColumn":22},{"ruleId":"126","severity":1,"message":"160","line":24,"column":10,"nodeType":"128","messageId":"129","endLine":24,"endColumn":18},{"ruleId":"126","severity":1,"message":"161","line":24,"column":20,"nodeType":"128","messageId":"129","endLine":24,"endColumn":31},{"ruleId":"126","severity":1,"message":"162","line":25,"column":19,"nodeType":"128","messageId":"129","endLine":25,"endColumn":29},{"ruleId":"126","severity":1,"message":"163","line":26,"column":19,"nodeType":"128","messageId":"129","endLine":26,"endColumn":29},{"ruleId":"126","severity":1,"message":"143","line":28,"column":10,"nodeType":"128","messageId":"129","endLine":28,"endColumn":18},{"ruleId":"126","severity":1,"message":"164","line":28,"column":20,"nodeType":"128","messageId":"129","endLine":28,"endColumn":31},{"ruleId":"126","severity":1,"message":"153","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":26},{"ruleId":"126","severity":1,"message":"138","line":1,"column":28,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"164","line":12,"column":20,"nodeType":"128","messageId":"129","endLine":12,"endColumn":31},{"ruleId":"126","severity":1,"message":"133","line":13,"column":10,"nodeType":"128","messageId":"129","endLine":13,"endColumn":14},{"ruleId":"126","severity":1,"message":"142","line":13,"column":16,"nodeType":"128","messageId":"129","endLine":13,"endColumn":23},{"ruleId":"126","severity":1,"message":"132","line":14,"column":24,"nodeType":"128","messageId":"129","endLine":14,"endColumn":39},{"ruleId":"126","severity":1,"message":"164","line":7,"column":20,"nodeType":"128","messageId":"129","endLine":7,"endColumn":31},{"ruleId":"126","severity":1,"message":"157","line":8,"column":3,"nodeType":"128","messageId":"129","endLine":8,"endColumn":9},{"ruleId":"126","severity":1,"message":"162","line":24,"column":19,"nodeType":"128","messageId":"129","endLine":24,"endColumn":29},{"ruleId":"126","severity":1,"message":"145","line":25,"column":10,"nodeType":"128","messageId":"129","endLine":25,"endColumn":17},{"ruleId":"126","severity":1,"message":"163","line":25,"column":19,"nodeType":"128","messageId":"129","endLine":25,"endColumn":29},{"ruleId":"126","severity":1,"message":"142","line":26,"column":16,"nodeType":"128","messageId":"129","endLine":26,"endColumn":23},{"ruleId":"126","severity":1,"message":"165","line":32,"column":11,"nodeType":"128","messageId":"129","endLine":32,"endColumn":14},{"ruleId":"126","severity":1,"message":"166","line":33,"column":11,"nodeType":"128","messageId":"129","endLine":33,"endColumn":16},{"ruleId":"126","severity":1,"message":"167","line":34,"column":11,"nodeType":"128","messageId":"129","endLine":34,"endColumn":15},{"ruleId":"126","severity":1,"message":"157","line":6,"column":3,"nodeType":"128","messageId":"129","endLine":6,"endColumn":9},{"ruleId":"126","severity":1,"message":"133","line":19,"column":10,"nodeType":"128","messageId":"129","endLine":19,"endColumn":14},{"ruleId":"126","severity":1,"message":"142","line":19,"column":16,"nodeType":"128","messageId":"129","endLine":19,"endColumn":23},{"ruleId":"126","severity":1,"message":"132","line":20,"column":24,"nodeType":"128","messageId":"129","endLine":20,"endColumn":39},{"ruleId":"126","severity":1,"message":"163","line":22,"column":19,"nodeType":"128","messageId":"129","endLine":22,"endColumn":29},{"ruleId":"126","severity":1,"message":"165","line":27,"column":11,"nodeType":"128","messageId":"129","endLine":27,"endColumn":14},{"ruleId":"126","severity":1,"message":"166","line":28,"column":11,"nodeType":"128","messageId":"129","endLine":28,"endColumn":16},{"ruleId":"126","severity":1,"message":"167","line":29,"column":11,"nodeType":"128","messageId":"129","endLine":29,"endColumn":15},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'FetchDataFromAPI' is defined but never used.","Identifier","unusedVar","'GetLocation' is defined but never used.","'searchedCity' is assigned a value but never used.","'setSearchedCity' is assigned a value but never used.","'city' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'main'. Either include it or remove the dependency array.","ArrayExpression",["170"],"'useState' is defined but never used.","'searchWeatherState' is defined but never used.","'Col' is defined but never used.","'Index' is defined but never used.","'setCity' is assigned a value but never used.","'fiveDays' is assigned a value but never used.","'lOneDay' is assigned a value but never used.","'sOneDay' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["171"],"'useEffect' is defined but never used.","'Card' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'Button' is defined but never used.","'cityState' is defined but never used.","'weatherState' is defined but never used.","'lWeather' is assigned a value but never used.","'setLWeather' is assigned a value but never used.","'setLOneDay' is assigned a value but never used.","'setSOneDay' is assigned a value but never used.","'setFiveDays' is assigned a value but never used.","'day' is assigned a value but never used.","'month' is assigned a value but never used.","'year' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [main]",{"range":"176","text":"177"},"Update the dependencies array to be: [city, fetchData, searchedCity]",{"range":"178","text":"179"},[1932,1934],"[main]",[3593,3613],"[city, fetchData, searchedCity]"]