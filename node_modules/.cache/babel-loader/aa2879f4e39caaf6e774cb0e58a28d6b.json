{"ast":null,"code":"var _jsxFileName = \"/home/hamza-alaydi/React/weather-app/src/components/SearchData.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Card, ListGroup, ListGroupItem, Button, Col, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { cityState, searchedCityState, sOneDayState } from \"../recoil/atom/cityAtom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LocationData = () => {\n  _s();\n\n  const [city, setCity] = useRecoilState(cityState);\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\n\n  if (sOneDay.dt) {\n    const link = `http://openweathermap.org/img/wn/${sOneDay.weather[0].icon}@2x.png`;\n    let date = new Date();\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let readableDate = date.toDateString();\n    let temperature = sOneDay.main.temp - 273.15;\n    temperature = Math.round(temperature);\n    let feels_like = (sOneDay.main.feels_like - 273.15) * 10;\n    feels_like = Math.round(feels_like);\n    feels_like = feels_like / 10;\n    return /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/DisplayFiveDays/`,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          xs: 1,\n          md: 2,\n          className: \"g-4\",\n          children: [console.log(sOneDay.name), Array.from({\n            length: 1\n          }).map((_, idx) => /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                marginTop: \"40px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(ListGroupItem, {\n                children: readableDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                style: {\n                  marginLeft: \"15px\"\n                },\n                children: [sOneDay.name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" City\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Img, {\n                variant: \"top\",\n                src: link\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n                className: \"list-group-flush\",\n                children: [/*#__PURE__*/_jsxDEV(ListGroupItem, {\n                  children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                    style: {\n                      marginLeft: \"0px\"\n                    },\n                    children: [sOneDay.weather[0].main, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\" \", temperature, \"\\xB0\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 54,\n                      columnNumber: 51\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 23\n                  }, this), sOneDay.weather[0].description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                  children: [\"Temperature: \", temperature, \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                  children: [\"Feels like : \", feels_like, \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                  children: [\"Wind Speed : \", sOneDay.wind.speed, \" km\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" not Entered yet \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(LocationData, \"foMWl6MBVTO42b0hbxQIxWW2QXU=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = LocationData;\nexport default LocationData;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationData\");","map":{"version":3,"sources":["/home/hamza-alaydi/React/weather-app/src/components/SearchData.js"],"names":["React","Card","ListGroup","ListGroupItem","Button","Col","Row","Link","useRecoilState","cityState","searchedCityState","sOneDayState","LocationData","city","setCity","searchedCity","setSearchedCity","sOneDay","setSOneDay","dt","link","weather","icon","date","Date","day","getDate","month","getMonth","year","getFullYear","readableDate","toDateString","temperature","main","temp","Math","round","feels_like","console","log","name","Array","from","length","map","_","idx","marginTop","marginLeft","description","wind","speed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  cityState,\n  searchedCityState,\n  sOneDayState,\n} from \"../recoil/atom/cityAtom\";\n\nconst LocationData = () => {\n  const [city, setCity] = useRecoilState(cityState);\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\n\n  const [sOneDay, setSOneDay] = useRecoilState(sOneDayState);\n  if (sOneDay.dt) {\n    const link = `http://openweathermap.org/img/wn/${sOneDay.weather[0].icon}@2x.png`;\n\n    let date = new Date();\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let readableDate = date.toDateString();\n\n    let temperature = sOneDay.main.temp - 273.15;\n    temperature = Math.round(temperature);\n    let feels_like = (sOneDay.main.feels_like - 273.15) * 10;\n    feels_like = Math.round(feels_like);\n    feels_like = feels_like / 10;\n    return (\n      <Col>\n        <Link to={`/DisplayFiveDays/`}>\n          <Row xs={1} md={2} className=\"g-4\">\n            {console.log(sOneDay.name)}\n            {Array.from({ length: 1 }).map((_, idx) => (\n              <Col>\n                <Card style={{ marginTop: \"40px\" }}>\n                  <ListGroupItem>{readableDate}</ListGroupItem>\n                  <Card.Title style={{ marginLeft: \"15px\" }}>\n                    {sOneDay.name} <span> City</span>\n                  </Card.Title>\n                  <Card.Img variant=\"top\" src={link} />\n\n                  <ListGroup className=\"list-group-flush\">\n                    <ListGroupItem>\n                      <Card.Title style={{ marginLeft: \"0px\" }}>\n                        {sOneDay.weather[0].main} <span> {temperature}°</span>\n                      </Card.Title>\n                      {sOneDay.weather[0].description}\n                    </ListGroupItem>\n                    <ListGroupItem>Temperature: {temperature}°</ListGroupItem>\n                    <ListGroupItem>Feels like : {feels_like}°</ListGroupItem>\n                    <ListGroupItem>\n                      Wind Speed : {sOneDay.wind.speed} km\n                    </ListGroupItem>\n                  </ListGroup>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Link>\n      </Col>\n    );\n  } else {\n    return <div> not Entered yet </div>;\n  }\n};\nexport default LocationData;\n"]},"metadata":{},"sourceType":"module"}