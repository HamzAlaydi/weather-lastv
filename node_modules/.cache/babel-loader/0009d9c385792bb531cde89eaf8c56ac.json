{"ast":null,"code":"var _jsxFileName = \"/home/hamza-alaydi/React/weather-app/src/components/FetchDataFromAPI.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useRecoilState } from \"recoil\";\nimport { cityState, fiveDaysState, weatherState, searchedState, searchedCityState } from \"../recoil/atom/cityAtom\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport GetLocation from \"./GetLocation\";\nimport Index from \"../screens/Index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst key = \"478f1611be4e3a210abc53f2b1c9e8d4\";\n\nconst FetchDataFromAPI = () => {\n  _s();\n\n  const [weather, setWeather] = useRecoilState(weatherState);\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\n  const [serchedCityWeather, setserchedCityWeather] = useRecoilState(searchedState);\n  const [city, setCity] = useRecoilState(cityState);\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState); // const [ss, setSS] = useState();\n\n  const link = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${key}`;\n  const searchedLink = `https://api.openweathermap.org/data/2.5/weather?q=${searchedCity}&appid=${key}`; ////////////////////Fetch Data\n\n  const sendReq = async () => {\n    if (window.location.pathname == \"\" || window.location.pathname == \"/\") {\n      if (searchedCity != \"\") {\n        //Get data for location city\n        // Get data for searched City\n        const serchedCityWeathers = await axios.get(searchedLink);\n        setserchedCityWeather(serchedCityWeathers);\n        console.log(\"Tow req sent\");\n\n        if (serchedCityWeather != \"recoilSearched\") {\n          console.log(serchedCityWeather);\n        } else {\n          return console.log(serchedCityWeather);\n        }\n      } else {\n        return console.log(\"seaarchedCity retuns null\");\n      }\n    } else if (window.location.pathname == \"/DisplayFiveDays\") {\n      const weatherData = await axios.get(link);\n      setWeather(weatherData);\n    }\n  };\n\n  const fetchData = () => {\n    if (typeof city == \"undefined\" || city == \"\") {\n      console.log(\"no city selected\");\n    } else {\n      sendReq();\n      let tempArr = [];\n\n      if (weather == \"recoil\" || typeof weather == undefined) {\n        console.log(\"City Nane  not loaded yet \");\n      } else {\n        let iterator = weather.data.list;\n\n        for (let i = 0; i < iterator.length; i += 8) {\n          tempArr.push(iterator[i]);\n        }\n\n        setFiveDays(tempArr);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [city, searchedCity]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GetLocation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FetchDataFromAPI, \"EkVd4VdXW5JQqnooi40zPrpQP8k=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = FetchDataFromAPI;\nexport default FetchDataFromAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchDataFromAPI\");","map":{"version":3,"sources":["/home/hamza-alaydi/React/weather-app/src/components/FetchDataFromAPI.js"],"names":["React","useState","useEffect","axios","useRecoilState","cityState","fiveDaysState","weatherState","searchedState","searchedCityState","Col","Row","Container","GetLocation","Index","key","FetchDataFromAPI","weather","setWeather","searchedCity","setSearchedCity","serchedCityWeather","setserchedCityWeather","city","setCity","fiveDays","setFiveDays","link","searchedLink","sendReq","window","location","pathname","serchedCityWeathers","get","console","log","weatherData","fetchData","tempArr","undefined","iterator","data","list","i","length","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  cityState,\r\n  fiveDaysState,\r\n  weatherState,\r\n  searchedState,\r\n  searchedCityState,\r\n} from \"../recoil/atom/cityAtom\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport GetLocation from \"./GetLocation\";\r\nimport Index from \"../screens/Index\";\r\n\r\nconst key = \"478f1611be4e3a210abc53f2b1c9e8d4\";\r\nconst FetchDataFromAPI = () => {\r\n  const [weather, setWeather] = useRecoilState(weatherState);\r\n  const [searchedCity, setSearchedCity] = useRecoilState(searchedCityState);\r\n\r\n  const [serchedCityWeather, setserchedCityWeather] =\r\n    useRecoilState(searchedState);\r\n\r\n  const [city, setCity] = useRecoilState(cityState);\r\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\r\n  // const [ss, setSS] = useState();\r\n\r\n  const link = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${key}`;\r\n  const searchedLink = `https://api.openweathermap.org/data/2.5/weather?q=${searchedCity}&appid=${key}`;\r\n\r\n  ////////////////////Fetch Data\r\n\r\n  const sendReq = async () => {\r\n    if (window.location.pathname == \"\" || window.location.pathname == \"/\") {\r\n      if (searchedCity != \"\") {\r\n        //Get data for location city\r\n\r\n        // Get data for searched City\r\n        const serchedCityWeathers = await axios.get(searchedLink);\r\n        setserchedCityWeather(serchedCityWeathers);\r\n        console.log(\"Tow req sent\");\r\n        if (serchedCityWeather != \"recoilSearched\") {\r\n          console.log(serchedCityWeather);\r\n        } else {\r\n          return console.log(serchedCityWeather);\r\n        }\r\n      } else {\r\n        return console.log(\"seaarchedCity retuns null\");\r\n      }\r\n    } else if (window.location.pathname == \"/DisplayFiveDays\") {\r\n      const weatherData = await axios.get(link);\r\n      setWeather(weatherData);\r\n    }\r\n  };\r\n\r\n  const fetchData = () => {\r\n    if (typeof city == \"undefined\" || city == \"\") {\r\n      console.log(\"no city selected\");\r\n    } else {\r\n      sendReq();\r\n\r\n      let tempArr = [];\r\n      if (weather == \"recoil\" || typeof weather == undefined) {\r\n        console.log(\"City Nane  not loaded yet \");\r\n      } else {\r\n        let iterator = weather.data.list;\r\n\r\n        for (let i = 0; i < iterator.length; i += 8) {\r\n          tempArr.push(iterator[i]);\r\n        }\r\n        setFiveDays(tempArr);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [city, searchedCity]);\r\n\r\n  return (\r\n    <Container>\r\n      <GetLocation />\r\n      <Row>\r\n        {/* {fiveDays.map((data) => (\r\n          <Col key={data.dt_txt}>\r\n            <DisplayData data={data} />\r\n          </Col>\r\n        ))} */}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FetchDataFromAPI;\r\n"]},"metadata":{},"sourceType":"module"}