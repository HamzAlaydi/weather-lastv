{"ast":null,"code":"var _jsxFileName = \"/home/hamza-alaydi/React/weather-app/src/screens/DisplayData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { fiveDaysState, cityState } from \"../recoil/atom/cityAtom\";\nimport { Card, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { Row, Container, Col } from \"react-bootstrap\";\nimport FetchDataFromAPI from \"../components/FetchDataFromAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayData = props => {\n  _s();\n\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\n  const [city, setCity] = useRecoilState(cityState);\n  useEffect(() => {\n    if (fiveDays.length == 0 || fiveDays.length == 2) {\n      return console.log(\"no Data\");\n    } else {\n      fiveDays.map(data => {\n        console.log(data.weather[0].icon);\n        const link = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;\n        let x = (data.main.temp - 273.15) * 10;\n        x = Math.round(x);\n        let temp = data.main.temp - 273.15;\n        temp = Math.round(temp);\n        x = x / 10;\n        let y = (data.main.feels_like - 273.15) * 10;\n        y = Math.round(y);\n        y = y / 10;\n        let date = new Date(data.dt_txt);\n        let readableDate = date.toDateString();\n        let month = date.getMonth() + 1;\n        let day = date.getDate() + \"-\" + month;\n      });\n    }\n  }, [fiveDays]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"You Choose \", city, \" City\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(FetchDataFromAPI, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), fiveDays.map(data => {\n        let obj;\n        let link = \"\";\n        let main = 0;\n        let temperature = 0;\n        let date;\n        let readableDate;\n\n        if (data.length == 2) {\n          console.log(\"data == 2\");\n        } else {\n          obj = data.weather[0];\n          main = obj.main;\n          temperature = data.main.temp - 273.15;\n          temperature = Math.round(temperature);\n          link = `http://openweathermap.org/img/wn/${obj.icon}@2x.png`;\n          data = new Date(data.dt_txt);\n          readableDate = data.toDateString();\n        }\n\n        return /*#__PURE__*/_jsxDEV(Col, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(Card, {\n            className: \"my-3 p-3 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: link\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: [main, /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\" \", temperature, \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                children: \"dsdas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Title, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              children: [/*#__PURE__*/_jsxDEV(ListGroupItem, {\n                children: obj.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                children: readableDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                children: [\"Temperature: \", temperature, \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListGroupItem, {\n                children: [\"Feels like : \", y, \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, Math.random(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DisplayData, \"OgFvapP/1SlkHFMJFkgSUfaBGkI=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = DisplayData;\nexport default DisplayData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"sources":["/home/hamza-alaydi/React/weather-app/src/screens/DisplayData.js"],"names":["React","useEffect","useState","useRecoilState","fiveDaysState","cityState","Card","ListGroup","ListGroupItem","Row","Container","Col","FetchDataFromAPI","DisplayData","props","fiveDays","setFiveDays","city","setCity","length","console","log","map","data","weather","icon","link","x","main","temp","Math","round","y","feels_like","date","Date","dt_txt","readableDate","toDateString","month","getMonth","day","getDate","obj","temperature","description","random"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { fiveDaysState, cityState } from \"../recoil/atom/cityAtom\";\r\nimport { Card, ListGroup, ListGroupItem } from \"react-bootstrap\";\r\nimport { Row, Container, Col } from \"react-bootstrap\";\r\nimport FetchDataFromAPI from \"../components/FetchDataFromAPI\";\r\nconst DisplayData = (props) => {\r\n  const [fiveDays, setFiveDays] = useRecoilState(fiveDaysState);\r\n  const [city, setCity] = useRecoilState(cityState);\r\n\r\n  useEffect(() => {\r\n    if (fiveDays.length == 0 || fiveDays.length == 2) {\r\n      return console.log(\"no Data\");\r\n    } else {\r\n      fiveDays.map((data) => {\r\n        console.log(data.weather[0].icon);\r\n        const link = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;\r\n\r\n        let x = (data.main.temp - 273.15) * 10;\r\n        x = Math.round(x);\r\n        let temp = data.main.temp - 273.15;\r\n        temp = Math.round(temp);\r\n        x = x / 10;\r\n        let y = (data.main.feels_like - 273.15) * 10;\r\n        y = Math.round(y);\r\n\r\n        y = y / 10;\r\n\r\n        let date = new Date(data.dt_txt);\r\n        let readableDate = date.toDateString();\r\n\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate() + \"-\" + month;\r\n      });\r\n    }\r\n  }, [fiveDays]);\r\n\r\n  return (\r\n    <Container>\r\n      <h3>You Choose {city} City</h3>\r\n      <Row>\r\n        <FetchDataFromAPI />\r\n        {fiveDays.map((data) => {\r\n          let obj;\r\n          let link = \"\";\r\n          let main = 0;\r\n          let temperature = 0;\r\n          let date;\r\n          let readableDate;\r\n          if (data.length == 2) {\r\n            console.log(\"data == 2\");\r\n          } else {\r\n            obj = data.weather[0];\r\n            main = obj.main;\r\n            temperature = data.main.temp - 273.15;\r\n            temperature = Math.round(temperature);\r\n            link = `http://openweathermap.org/img/wn/${obj.icon}@2x.png`;\r\n            data = new Date(data.dt_txt);\r\n            readableDate = data.toDateString();\r\n          }\r\n          return (\r\n            <Col key={Math.random()}>\r\n              {\" \"}\r\n              <Card className=\"my-3 p-3 rounded\">\r\n                <Card.Img variant=\"top\" src={link} />\r\n                <Card.Body>\r\n                  <Card.Title>\r\n                    {main}\r\n                    <span> {temperature}°</span>\r\n                  </Card.Title>\r\n                  <Card.Title>dsdas</Card.Title>\r\n                  <Card.Title></Card.Title>\r\n                </Card.Body>\r\n                <ListGroup>\r\n                  <ListGroupItem>{obj.description}</ListGroupItem>\r\n                  <ListGroupItem>{readableDate}</ListGroupItem>\r\n                  <ListGroupItem>Temperature: {temperature}°</ListGroupItem>\r\n                  <ListGroupItem>Feels like : {y}°</ListGroupItem>\r\n                </ListGroup>\r\n              </Card>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\nexport default DisplayData;\r\n"]},"metadata":{},"sourceType":"module"}